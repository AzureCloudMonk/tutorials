Extending GopherJS

Caleb Doxsey
Software Engineer, Datadog
caleb@doxsey.net
http://www.doxsey.net

* Who I Am

.image assets/cover.png 400 _
.caption golang-book.com

* We're Hiring!

.image assets/datadog.png 400 _

* GopherJS

GopherJS is a compiler for Go which produces Javascript intended to run in the browser. Code is compiled with:

.code example-01/build.bash

Or:

.code example-01/serve.bash

Programs are standard Go programs:

.code example-01/main.go

.link http://localhost:8080/github.com/calebdoxsey/tutorials/talks/2018-01-30--extending-gopherjs/example-01/ example-01


* Javascript

Javascript can be accessed via the `gopherjs/js` library:
.code example-02/main.go
.link http://localhost:8080/github.com/calebdoxsey/tutorials/talks/2018-01-30--extending-gopherjs/example-01/ example-02

* Javascript Cont'd

This API is sufficient to call any function available in Javascript and bindings exist for popular libraries like React:
.code example-02/react.go

* Compatibility

GopherJS implements the entire language and most packages. An example:
.code example-03/sort.go /START OMIT/,/END OMIT/

* Merge
.code example-03/merge.go /START OMIT/,/END OMIT/
.link http://localhost:8080/github.com/calebdoxsey/tutorials/talks/2018-01-30--extending-gopherjs/example-03/ example-03

* What Doesn't Work
Not everything works in GopherJS, notably:
- `stdin`
- files
- network access
- executing commands
.code example-04/main.go /START OMIT/,/END OMIT/
.link http://localhost:8080/github.com/calebdoxsey/tutorials/talks/2018-01-30--extending-gopherjs/example-04/ example-04
.image assets/syscall-warning.png

* Sandbox

GopherJS can't provides these capabilities, because your Browser can't provide these capabilities. It won't let you write files, or bind a port, or make a raw TCP connection, and it definitely won't let you execute an arbitrary program, for obvious reasons.

But this is Go's bread and butter. Go is more than just a programming language. It's also a set of powerful API abstractions for working with the operating system. Nearly all real-world, practical Go programs need these capabilities in order to work.

Without the APIs is GopherJS just a brilliant technical curiosity?

* The Most Useless Machine in the World?
.image assets/useless-machine.gif

* Emulation
What if we emulated an operating system's API?

If the emulation layer is close enough to the real thing, programs using the API will never be the wiser.

* System Calls
System Calls are the mechanism by which programs can interface with the Operating System. Different operating systems and architectures have different mechanisms for invoking system calls:

.link https://golang.org/src/syscall/asm_linux_amd64.s Linux AMD64

Linux is a monolothic kernel with lots and lots of system calls:

.link http://man7.org/linux/man-pages/man2/syscalls.2.html Syscall Listing

Which can also be found in Go:

.link https://golang.org/pkg/syscall/#SYS_READ Syscall Constants

But most programs only use a few of them.

* How GopherJS Works

GopherJS works by modifying the standard package code included with Go so that it can run in the browser. The pseudo file system is here:

.link https://github.com/gopherjs/gopherjs/tree/master/compiler/natives/src Natives

Any code not altered will be preserved, so the goal is to make the minimal number of changes to get things to work. System calls simply error out:

.link https://github.com/gopherjs/gopherjs/blob/master/compiler/natives/src/syscall/syscall_unix.go#L57 Syscalls

I modified GopherJS slightly to make it easier to change system calls:

.link https://github.com/gopherjs/gopherjs/compare/master...badgerodon:ext My Changes

* An Example: stdout to page
Instead of printing data to the console, let's print it to the page with `document.write`.

.code example-05/write.go /START OMIT/,/END OMIT/

.code example-05/main.go /START OMIT/,/END OMIT/

.link http://localhost:8080/github.com/calebdoxsey/tutorials/talks/2018-01-30--extending-gopherjs/example-05/ example-05

* A Virtual File System
Use an init function to register the virtual file system syscall handlers:
.code example-06/init.go /START OMIT/,/END OMIT/

* A Virtual File System
.code example-06/vfs.go /START OMIT/,/END OMIT/

* A Virtual File System: Write
.code example-06/vfs_write.go /START OMIT/,/END OMIT/

* A Virtual File System: Example
Open a file, write to it, close it, and re-read it.
.code example-06/main.go /START OMIT/,/END OMIT/
.link http://localhost:8080/github.com/calebdoxsey/tutorials/talks/2018-01-30--extending-gopherjs/example-06/ example-06

* A Virtual File System: Persistence
We can use IndexedDB to implement persistence. First update the virtual file system:
.code example-07/vfs.go /START OMIT/,/END OMIT/

* A Virtual File System: Persistence
Open reads the file from IndexedDB:
.code example-07/vfs_open.go /START OMIT/,/END OMIT/

* A Virtual File System: Persistence
And Close writes it:
.code example-07/vfs_close.go /START OMIT/,/END OMIT/

* A Virtual File System: Persistence
.code example-07/main.go /START OMIT/,/END OMIT/
.link http://localhost:8080/github.com/calebdoxsey/tutorials/talks/2018-01-30--extending-gopherjs/example-07/ example-07

* Network Sockets
The same approach could be implemented for network sockets. Implement syscall handlers for `socket`, `bind`, `listen`, `connect`, `etc`.

Rather than show you the nitty, gritty details, I'll show you a fully fledged example.

* Run the net/http Server in GopherJS

- The "server" will run using the standard http `Serve` on a custom `net.Listener`
- The `net.Listener` is attached to a websocket connected to a special proxy
- The websocket connection is converted to a `net.Listener` using `yamux`
- The proxy receives the connection from the server and starts a real network listener
- All communication on that port is forwarded both ways by the proxy

* Server
.code example-08/server/main.go  /START OMIT/,/END OMIT/

* Server
The websocket `net.Conn`:
.code example-08/server/conn.go  /START OMIT/,/END OMIT/

* Proxy: listen
The websocket listener:
.code example-08/proxy/listen.go  /START LISTEN OMIT/,/END LISTEN OMIT/

* Proxy: accept
The websocket accept loop:
.code example-08/proxy/listen.go  /START ACCEPT OMIT/,/END ACCEPT OMIT/

* Proxy: proxy
I love this:
.code example-08/proxy/main.go  /START PROXY OMIT/,/END PROXY OMIT/

.link http://localhost:8080/github.com/calebdoxsey/tutorials/talks/2018-01-30--extending-gopherjs/example-08/server/ server
.link http://localhost:5001/ client

* Client
Let's take it further, we can run the client via GopherJS too:
.code example-08/client/main.go /START OMIT/,/END OMIT/
.link http://localhost:8080/github.com/calebdoxsey/tutorials/talks/2018-01-30--extending-gopherjs/example-08/client/ client

And now we're running a browser in a browser.

* Browsers All the Way Down
I even have a way of running the proxy in GopherJS...

It's browsers all the way down

* STOP
.image ./assets/jurassic-park.jpg
